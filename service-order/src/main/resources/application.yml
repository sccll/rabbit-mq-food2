server:
  port: 8621

spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:mysql://127.0.0.1:3306/take_out_food?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    username: root
    password: 123456
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    #  开启消息发送端确认机制， 默认是false
    # 如果没有本条配置信息，当消费者收到生产者发送的消息后，生产者无法收到确认成功的回调信息
    #  publisher-confirms: true 旧的jar写法
    publisher-confirm-type: correlated
    # 支持消息发送失败返回队列，默认是false， 不设置为true消息发送失败不回调ReturnsCallback， 消息丢失
    publisher-returns: true
    # 监听配置
    listener:
      simple:
        # 消费者确认机制： ack 确认模式：手动确认
        acknowledge-mode: manual
        retry:
          enabled: true
          max-attempts: 5
          initial-interval: 5000ms
        # -------------------- 消费端MQ并发处理消息
        # 消费者监听最小数量（即@RabbitListener开启几个线程去处理数据）
        concurrency: 1
        # 消费端的监听最大个数
        max-concurrency: 10
        # 消费者限流参数配置
        # 一个消费端最多接受多少unacked之后就不接受其他消息，2 表示，队列中有2个unacked的消息，它不在接受其他消息，其他消息如果不被其他队列消费，会一直ready
        # 这样做的好处是其他对应的消费队列可以从ready获取消费，而不是都堆积在这个队列中unacked
        prefetch: 2


mybatis-plus:
  mapper-locations: classpath*:/mapper/*Mapper.xml
  type-aliases-package: scc.food.order.entity
  global-config:
    db-config:
      id-type: auto
      field-strategy: not_null
      table-underline: true
      logic-delete-value: 1
      logic-not-delete-value: 0
      column-like: true
  configuration:
    #查询返回Map时设置值为null的字段也在结果集中
    call-setters-on-nulls: true
    #禁用缓存
    cache-enabled: false
    #map下划线转驼峰
    map-underscore-to-camel-case: true

scc:
  mq:
    service: orderHeaderService
    # 重发的次数
    resendTimes: 5
    # 重发的频率
    resendFreq: 5000

    dlxEnabled: true